#bot.py

'''
This is the aacf deploy of ticket-sniper 1.0, developed by noach.
'''

from textAnalysis import sniper

import discord
import os
import numpy as np
from datetime import date,timedelta, datetime
import pytz
import csv

from dotenv import load_dotenv


def checkYoungMember(dateJoined, checkLength):
    #if the date joined + checkLength is greater than the current day, they are young
    utc=pytz.UTC
    awareDJ = (dateJoined + timedelta(days = checkLength)).replace(tzinfo=utc)
    awareTD = datetime.now().replace(tzinfo=utc)
    #testDate = datetime.now() + timedelta(days = checkLength)
    if awareDJ >= awareTD:
        print(awareDJ)
        print(awareTD)
        return True
    
def checkMessageLength(messageLength, checkLength):
    if messageLength >= checkLength:
        return True

load_dotenv()
TOKEN = str(os.getenv('DISCORD_TOKEN'))
GUILD = str(os.getenv('DISCORD_GUILD_AA'))

print(TOKEN)
print(GUILD)

#TOKEN.type()
#GUILD.type()

intents = discord.Intents.default()
intents.message_content = True #note that this also marked in the discord application manager (privaliged intent)
intents.messages = True

client = discord.Client(intents = intents)

theSniper = sniper()

@client.event
async def on_ready():
    for guild in client.guilds:
        if guild.name == GUILD:
            break

    print(
        f'{client.user} is connected to the following guild:\n'
        f'{guild.name}(id: {guild.id})'
    )


#channelIDsToListen = os.getenv('CHANNEL_IDS_NN')#.split(',') #will need to use aacf channel id's
#channelIDsToListen = [1311151950087065603,1318014453966442516]
channelIDsToListen = [1158523330970787870,
                  1161008448872382485,
                  1251392303596048475,
                  1158539883590193192,
                  1158591775632543754,
                  1158539286673641472,
                  1162233425340674188,
                  1158602297555820594,
                  1198777592346591312,
                  1298162969007493161,
                  1305423284208144426]
print(channelIDsToListen)

@client.event
async def on_message(message):

    if message.author.id in [client.user.id]:
        return
    #print(type(message.channel.id))
    if message.channel.id in channelIDsToListen:
        verify = message.author

        if checkYoungMember(verify.joined_at,2) and checkMessageLength(len(message.content), 130): #and verify.name == 'xibard':
            print("message length: " + str(len(message.content)))
            print(message.content)

            if theSniper.snipe(message.content):
                print("scam message found: ")
                print(message.content)
                with open('logFile', mode = 'a', newline='') as file: #mode = append
                    writer = csv.writer(file, delimiter = '|')
                    writer.writerow([message.author, message.content, datetime.now()])
                await message.delete() #~this is extremely dangerous

                channel = client.get_channel(message.channel.id)
                await channel.send("scam message detected on " + str(datetime.now()))

client.run(TOKEN)